// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  wallet    String?  // Solana wallet address
  telegramId String? @unique // Telegram user ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entries   Entry[]
  @@map("users")
}

model Round {
  id          String      @id @default(cuid())
  status      RoundStatus @default(OPEN)
  potAmount   BigInt      @default(0) // in lamports
  winner      String?  // wallet address
  winnerEntryId String?
  winnerEntry Entry?  @relation("WinnerEntry", fields: [winnerEntryId], references: [id])
  createdAt   DateTime @default(now())
  closedAt    DateTime?
  settledAt   DateTime?

  entries     Entry[]
  @@map("rounds")
}

model Entry {
  id          String   @id @default(cuid())
  roundId     String
  userId      String   // from existing link system
  wallet      String   // Solana wallet
  amount      BigInt   // lamports deposited
  ticketCount Int      @default(1)
  createdAt   DateTime @default(now())

  round       Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments    Payment[]
  wonRounds   Round[]  @relation("WinnerEntry")
  @@map("entries")
}

model Payment {
  id        String        @id @default(cuid())
  reference String        @unique // Solana Pay reference
  amount    BigInt        // lamports
  wallet    String        // sender wallet
  status    PaymentStatus @default(PENDING)
  entryId   String?       // linked entry if confirmed
  createdAt DateTime      @default(now())

  entry     Entry?        @relation(fields: [entryId], references: [id])
  @@map("payments")
}

enum RoundStatus {
  OPEN
  CLOSED
  SETTLED
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
}
