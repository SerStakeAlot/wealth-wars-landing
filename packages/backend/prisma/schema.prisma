// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  wallet      String?  @unique // Solana wallet address (web players)
  telegramId  String?  @unique // Telegram user ID (bot players)
  username    String   // Display name: @username (Telegram) or custom (Web)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  entries     Entry[]
  
  @@index([wallet])
  @@index([telegramId])
  @@index([username])
  @@map("users")
}

model Round {
  id          String      @id @default(cuid())
  status      RoundStatus @default(OPEN)
  potAmount   BigInt      @default(0) // in lamports
  winner      String?  // wallet address
  winnerEntryId String?
  winnerEntry Entry?  @relation("WinnerEntry", fields: [winnerEntryId], references: [id])
  createdAt   DateTime @default(now())
  closedAt    DateTime?
  settledAt   DateTime?

  // On-chain state tracking
  onchainRoundId     BigInt?   @unique // on-chain round ID (u64)
  onchainAddress     String?   @unique // PDA address of the round
  authorityAddress   String?   // authority who created the round
  ticketPriceLamports BigInt?  // price per ticket on-chain
  maxEntries         Int?      // max entries allowed (0 = unlimited)
  startSlot          BigInt?   // slot when round opened
  endSlot            BigInt?   // slot when round closes
  treasuryCutLamports BigInt?  // amount retained by treasury
  retainedBps        Int?      // basis points retained (e.g., 500 = 5%)
  entryCount         Int?      @default(0) // total entries on-chain
  
  // Transaction tracking
  initTxSignature    String?   // initialize_round transaction
  settleTxSignature  String?   // settle_round transaction
  lastSyncedAt       DateTime? // last time synced from on-chain
  syncError          String?   // last sync error if any

  entries     Entry[]
  transactions Transaction[]
  @@map("rounds")
}

model Entry {
  id          String   @id @default(cuid())
  roundId     String
  userId      String   // from existing link system
  wallet      String   // Solana wallet
  amount      BigInt   // lamports deposited
  ticketCount Int      @default(1)
  createdAt   DateTime @default(now())

  // On-chain state tracking
  onchainAddress  String?  @unique // PDA address of the entry
  nonce           Int?     // nonce used for entry PDA
  claimed         Boolean  @default(false) // whether payout/refund was claimed
  claimedAt       DateTime?
  claimTxSignature String? // transaction signature of claim
  
  // Transaction tracking
  joinTxSignature String?  // join_round transaction signature
  lastSyncedAt    DateTime? // last time synced from on-chain

  round       Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments    Payment[]
  wonRounds   Round[]  @relation("WinnerEntry")
  @@map("entries")
}

model Payment {
  id        String        @id @default(cuid())
  reference String        @unique // Solana Pay reference
  amount    BigInt        // lamports
  wallet    String        // sender wallet
  status    PaymentStatus @default(PENDING)
  entryId   String?       // linked entry if confirmed
  createdAt DateTime      @default(now())

  entry     Entry?        @relation(fields: [entryId], references: [id])
  @@map("payments")
}

model Transaction {
  id          String            @id @default(cuid())
  signature   String            @unique // Transaction signature
  type        TransactionType   // Type of transaction
  status      TransactionStatus @default(PENDING)
  roundId     String?           // Associated round
  userId      String?           // User who initiated
  wallet      String?           // Wallet address
  
  // Transaction details
  slot        BigInt?           // Slot number when confirmed
  blockTime   DateTime?         // Block timestamp
  fee         BigInt?           // Transaction fee in lamports
  
  // Error tracking
  error       String?           // Error message if failed
  retryCount  Int               @default(0)
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  confirmedAt DateTime?

  round       Round?            @relation(fields: [roundId], references: [id])
  
  @@index([roundId])
  @@index([wallet])
  @@index([type])
  @@index([status])
  @@map("transactions")
}

enum RoundStatus {
  OPEN
  CLOSED
  SETTLED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum TransactionType {
  INITIALIZE_ROUND
  JOIN_ROUND
  SETTLE_ROUND
  CLAIM_PAYOUT
  CLAIM_REFUND
  ADMIN_CLOSE
}

enum TransactionStatus {
  PENDING
  SUBMITTED
  CONFIRMED
  FAILED
}
